import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
/*
 * 제한 칼로리를 넘지 않는 조합 중 맛 점수가 가장 높은 경우를 찾는 문제
 * 이런 애들 특: 다이어트 절대 성공 X
 * */
public class SWEA5215 {
    static int N, limit;
    static List<Ingredient> ingredients;
    static int answer;

    static class Ingredient { // 세훈님 따라 클래스로 관리해봄.
        int flavor;
        int calorie;

        Ingredient(int flavor, int calorie) {
            this.flavor = flavor;
            this.calorie = calorie;
        }
    }
    
    private static void combi(int count, int start, int calNow, int flavorNow) { // 조합 구하는 메서드
    	if (count > ingredients.size() || calNow > limit) {
            return;
        }
		
		for (int i = start; i < ingredients.size(); i++) {
			combi(count+1, i+1, calNow + ingredients.get(i).calorie, flavorNow + ingredients.get(i).flavor );
		}
		answer = Math.max(answer, flavorNow);
	}

    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());

        for (int test_case = 1; test_case <= T; test_case++) {
        	StringTokenizer st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            limit = Integer.parseInt(st.nextToken());
            answer = 0;
            
            ingredients = new ArrayList<>();
            for (int i = 0; i < N; i++) {
            	StringTokenizer temp = new StringTokenizer(br.readLine());
            	int inputFla = Integer.parseInt(temp.nextToken());
            	int inputCal = Integer.parseInt(temp.nextToken());
            	
            	/* 
            	 * 입력된 재료의 칼로리가 limit보다 크거나 같을 경우 다른 재료와 함께 사용할 수 없으므로 미포함.
            	 * 단, 입력된 칼로리가 limit칼로리와 같을 경우 이 재료 하나만 넣는 경우로 answer업데이트.
            	 * 이 부분때문에 ArrayList 씀. 시간 미세하게 줄어들긴 하는데 유의미한지는 고민해봐야할 듯 .
            	 * */ 
            	if(inputCal == limit) {
            		answer = inputFla;
            		continue;
            	}else if (inputCal > limit) {continue;}
            	
                ingredients.add(new Ingredient(inputFla, inputCal));
            }

            combi(0,0,0,0);

            System.out.printf("#%d %d\n", test_case, answer);
        }
    }
}
